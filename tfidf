import numpy as np
import nltk
import re
import heapq
import numpy as np 
nltk.download('punkt')

texto = "A carteira colocou a carteira na carteira"

def main():
  sentenca = tokenizar(texto)

  contador = histograma(sentenca)

  frequencia = heapq.nlargest(50,contador, key=contador.get)
  print(f"ordem frequencia : {frequencia}")

  matriz_tf = tf(frequencia, sentenca)

  matriz_idf = idf(frequencia, sentenca)

  tfidfmatriz = tf_idf(matriz_tf, matriz_idf)


# Tokenização
def tokenizar(texto):
  sentenca = nltk.sent_tokenize(texto)
  for i in range (len(sentenca)):
      sentenca[i] = re.sub(r'[^\w\s]', '', sentenca[i]) # troca tudo que não for uma palavra para um espaço
      sentenca[i] = sentenca[i].replace('\n', ' ').replace('\r', '') # troca tudo que for quebras de linha para um espaço simples

  print(f"Sentença: {sentenca}")
  return sentenca

# Histograma
def histograma(sentenca):
  contador = {}
  for data in sentenca:
      palavras = nltk.word_tokenize(data)
      for palavra in palavras:
          if palavra not in contador.keys():
              contador[palavra] = 1
          else:
              contador[palavra] += 1
  print(f"histograma {contador}")
  return contador
  
# TF
def tf(frequencia, sentenca):
  tf_matriz = {}

  for palavra in frequencia:
      doc_tf = []
      for data in sentenca:
          numeroFrequencia = 0
          for w in nltk.word_tokenize(data):
              if w == palavra:
                  numeroFrequencia += 1
          tf_palavra = numeroFrequencia/len(nltk.word_tokenize(data))
          doc_tf.append(tf_palavra)
      tf_matriz[palavra] = doc_tf

  print(f"TF: {tf_matriz}")
  return tf_matriz
  
# IDF
def idf(frequencia, sentenca):
  palavras_idfs = {}
  for palavra in frequencia:
      doc_count = 0 
      for data in sentenca:
          if palavra in nltk.word_tokenize(data):
              doc_count += 1
      palavras_idfs[palavra] = np.log((len(sentenca)/doc_count)+1)
      
  print(f"IDF: {palavras_idfs}")
  return palavras_idfs

# TF-IDF 
def tf_idf(tf_matriz, palavras_idfs):
  tfidf_matriz = []

  for palavra in tf_matriz.keys():
      tfidf = []
      for value in tf_matriz[palavra]:
          score = value * palavras_idfs[palavra]
          tfidf.append(score)
      tfidf_matriz.append(tfidf)
      
  print(f"TF-IDF {tfidf_matriz}")


main()
